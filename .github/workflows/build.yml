name: Build, Sonar + AI Analysis

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  analyze:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write

    env:
      SONAR_URL: https://sonarcloud.io
      PROJECT_KEY: Raygama_collections-demo

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Maven & JDK17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Compile
        run: mvn -B compile -Drat.skip=true -DskipTests

      - name: SonarCloud scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mvn -B org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=${{ env.PROJECT_KEY }} \
            -Dsonar.organization=raygama \
            -Dsonar.host.url=${{ env.SONAR_URL }}

      - name: Install CLI tools
        run: sudo apt-get update && sudo apt-get install -y jq gh

      - name: Get PR changed files
        id: files
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr diff --name-only > changed.txt
          jq -R -s -c 'split("\n")[:-1]' changed.txt > changed.json
          echo "list=$(cat changed.json)" >> $GITHUB_OUTPUT

      - name: Fetch Sonar issues + code snippets
        id: sonar-issues
        run: |
          curl -s -G "${{ env.SONAR_URL }}/api/issues/search" \
            --data-urlencode "componentKeys=${{ env.PROJECT_KEY }}" \
            --data-urlencode "pullRequest=${{ github.event.pull_request.number }}" \
            -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}" > all-issues.json

          jq -c '.issues[]' all-issues.json > issue-lines.txt || echo '[]' > issue-lines.txt
          echo '[' > issues.json
          first=true

          while IFS= read -r issue; do
            comp=$(jq -r '.component' <<<"$issue" | cut -d: -f2-)
            ln=$(jq -r '.line // 1' <<<"$issue")

            # Fetch raw file content
            raw=$(curl -s -G "${{ env.SONAR_URL }}/api/sources/raw" \
              --data-urlencode "key=${{ env.PROJECT_KEY }}:$comp" \
              -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}")

            # Extract only 10â€“11 lines around the issue
            start=$((ln > 5 ? ln - 5 : 1))
            end=$((ln + 5))
            snippet=$(echo "$raw" | sed -n "${start},${end}p" \
              | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')

            entry=$(jq -n \
              --arg issue "$issue" \
              --arg snippet "$snippet" \
              '($issue|fromjson) + { snippet: $snippet }')

            if [ "$first" = true ]; then
              first=false
              echo "$entry" >> issues.json
            else
              echo ",$entry" >> issues.json
            fi
          done < issue-lines.txt

          echo ']' >> issues.json


      - name: Send issues to Technical Debt Analyzer
        id: flowise-analysis
        env:
          FLOWISE_BEARER_TOKEN: ${{ secrets.FLOWISE_BEARER_TOKEN }}
        run: |
          ISSUES_JSON=$(jq -c . issues.json)

          PAYLOAD=$(jq -cn \
            --arg pr "${{ github.event.pull_request.number }}" \
            --arg proj "${{ env.PROJECT_KEY }}" \
            --arg question "Analyze the following SonarCloud issues from PR #${{ github.event.pull_request.number }} If there are duplicates, then analyze it only one time. Make sure to refer to the real code and show where it went wrong." \
            --argjson issues "$ISSUES_JSON" \
            '{
              question: $question,
              overrideConfig: {
                projectKey: $proj,
                prNumber: $pr
              },
              issues: $issues
            }')

          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $FLOWISE_BEARER_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            https://cloud.flowiseai.com/api/v1/prediction/ae8b5cb1-b90b-4f25-9395-a839e92e2bf6)

          echo "$RESPONSE" > flowise_output.json

          DELIM=$(openssl rand -hex 8)
          echo "analysis<<$DELIM" >> "$GITHUB_OUTPUT"
          echo "$RESPONSE" >> "$GITHUB_OUTPUT"
          echo "$DELIM" >> "$GITHUB_OUTPUT"

      - name: Comment on PR
        uses: actions/github-script@v6
        if: success()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = 'flowise_output.json';

            if (!fs.existsSync(path)) {
              core.warning('Flowise output file not found.');
              return;
            }

            const raw = fs.readFileSync(path, 'utf8').trim();
            if (!raw || raw[0] !== '{') {
              core.warning('Flowise did not return valid JSON. Skipping comment.');
              return;
            }

            let parsed;
            try {
              parsed = JSON.parse(raw);
            } catch (e) {
              core.warning(`JSON parse error: ${e.message}`);
              return;
            }

            const body = parsed.text || 'Flowise returned:\n```json\n' +
                          JSON.stringify(parsed, null, 2) + '\n```';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

