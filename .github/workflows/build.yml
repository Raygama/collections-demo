name: Build, Sonar + AI Analysis

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  analyze:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write

    env:
      SONAR_URL: https://sonarcloud.io
      PROJECT_KEY: Raygama_collections-demo

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Maven & JDK17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Compile
        run: mvn -B compile -Drat.skip=true -DskipTests

      - name: SonarCloud scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mvn -B org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=${{ env.PROJECT_KEY }} \
            -Dsonar.organization=raygama \
            -Dsonar.host.url=${{ env.SONAR_URL }}

      - name: Fetch Sonar issues with context
        id: sonar-issues
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # Fetch all issues for the pull request
          all_issues_json=$(curl -s -G "${{ env.SONAR_URL }}/api/issues/search" \
            --data-urlencode "componentKeys=${{ env.PROJECT_KEY }}" \
            --data-urlencode "pullRequest=${{ github.event.pull_request.number }}" \
            -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}")
          
          # Check if issues were found
          if [ "$(echo "$all_issues_json" | jq '.issues | length')" -eq 0 ]; then
            echo "No Sonar issues found."
            echo "data=[]" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Process each issue to get the source snippet
          enriched_issues=$(echo "$all_issues_json" | jq -c '.issues[]' | while IFS= read -r issue; do
            comp=$(echo "$issue" | jq -r '.component')
            line=$(echo "$issue" | jq -r '.line')
            
            # Fetch source code lines around the issue
            raw_source=$(curl -s -G "${{ env.SONAR_URL }}/api/sources/lines" \
              --data-urlencode "key=$comp" \
              --data-urlencode "from=$((line-5))" \
              --data-urlencode "to=$((line+5))" \
              -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}")
            
            # Extract and format the snippet
            snippet=$(echo "$raw_source" | jq -r '.lines | .[] | .code' | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
            
            # Add the snippet to the original issue object
            echo "$issue" | jq --arg snippet "$snippet" '. + {sourceSnippet: $snippet}'
          done | jq -s '.')
          
          echo "data=$enriched_issues" >> "$GITHUB_OUTPUT"

      - name: Send to Flowise AI
        id: flowise
        if: steps.sonar-issues.outputs.data != '[]' # Only run if there are issues
        env:
          FLOWISE_BEARER_TOKEN: ${{ secrets.FLOWISE_BEARER_TOKEN }}
        run: |
          # Prepare the payload for Flowise, including the enriched issues
          JSON_BODY=$(printf '{
            "question": "Analyze these sonar issues using your knowledge!",
            "overrideConfig": {
              "sonarData": %s
            }
          }' '${{ steps.sonar-issues.outputs.data }}')

          ANALYSIS_RESULT=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $FLOWISE_BEARER_TOKEN" \
            -d "$JSON_BODY" \
            https://cloud.flowiseai.com/api/v1/prediction/ae8b5cb1-b90b-4f25-9395-a839e92e2bf6)
            
          # Safely output the result for the next step
          EOF=$(openssl rand -hex 16)
          echo "analysis<<$EOF" >> "$GITHUB_OUTPUT"
          echo "$ANALYSIS_RESULT" >> "$GITHUB_OUTPUT"
          echo "$EOF" >> "$GITHUB_OUTPUT"

      - name: Comment on PR
        if: steps.flowise.outputs.analysis != '' # Only run if Flowise returned a response
        uses: actions/github-script@v6
        env:
          ANALYSIS_JSON: ${{ steps.flowise.outputs.analysis }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const rawJson = process.env.ANALYSIS_JSON;

            if (!rawJson || rawJson.trim() === '{}' || rawJson.trim() === '') {
              core.warning('Flowise returned an empty or invalid response. Skipping PR comment.');
              return;
            }

            let parsed;
            try {
              parsed = JSON.parse(rawJson);
            } catch (e) {
              core.setFailed(`Invalid JSON from Flowise: ${e.message}\n\nRaw:\n${rawJson}`);
              return;
            }

            const text = parsed.text || 'Flowise returned an unexpected response format.';

            const body = `### AI Technical Debt Analysis\n\n---\n\n${text}`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
