name: Build, Sonar + AI Analysis

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  analyze:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write

    env:
      SONAR_URL: https://sonarcloud.io
      PROJECT_KEY: Raygama_collections-demo

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Maven & JDK17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Compile
        run: mvn -B compile -Drat.skip=true -DskipTests

      - name: SonarCloud scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mvn -B org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=${{ env.PROJECT_KEY }} \
            -Dsonar.organization=raygama \
            -Dsonar.host.url=${{ env.SONAR_URL }}

      - name: Install CLI tools
        run: sudo apt-get update && sudo apt-get install -y jq gh

      - name: Get PR changed files
        id: files
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr diff --name-only > changed.txt
          jq -R -s -c 'split("\n")[:-1]' changed.txt > changed.json
          echo "list=$(cat changed.json)" >> $GITHUB_OUTPUT
          cat changed.json

      - name: Fetch Sonar issues + code snippets
        id: sonar-issues
        run: |
          curl -s -G "${{ env.SONAR_URL }}/api/issues/search" \
            --data-urlencode "componentKeys=${{ env.PROJECT_KEY }}" \
            --data-urlencode "pullRequest=${{ github.event.pull_request.number }}" \
            -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}" > all-issues.json

          jq -c '.issues[]' all-issues.json > issue-lines.txt || echo '[]' > issue-lines.txt
          echo '[' > issues.json
          first=true

          while IFS= read -r issue; do
            comp=$(jq -r '.component' <<<"$issue" | cut -d: -f2-)
            ln=$(jq -r '.line // 1' <<<"$issue")
            status=$(jq -r '.status' <<<"$issue")
            text=$(jq -r '.message' <<<"$issue")

            # Skip non-OPEN issues
            if [[ "$status" != "OPEN" ]]; then
              continue
            fi

            # Skip if file does not exist
            if [ ! -f "$comp" ]; then
              continue
            fi

            # Grab surrounding snippet
            start=$((ln - 2 < 1 ? 1 : ln - 2))
            end=$((ln + 2))
            snippet=$(sed -n "${start},${end}p" "$comp" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
            text_line=$(sed -n "${ln}p" "$comp" | sed 's/"/\\"/g')

            # Validate actual match
            if [[ -z "$text_line" || "$text_line" == *"Licensed to the Apache Software Foundation"* || ! "$snippet" == *"$text_line"* ]]; then
              echo "Skipping invalid or irrelevant issue at $comp:$ln"
              continue
            fi

            # Add valid entry
            entry=$(jq -n --arg issue "$issue" --arg snippet "$snippet" '($issue|fromjson) + { snippet: $snippet }')
            if [ "$first" = true ]; then
              first=false
              echo "$entry" >> issues.json
            else
              echo ",$entry" >> issues.json
            fi
          done < issue-lines.txt

          echo ']' >> issues.json

          HAS_ISSUES=$(jq 'length > 0' issues.json)
          echo "has_issues=$HAS_ISSUES" >> $GITHUB_OUTPUT


      - name: Send issues to Technical Debt Analyzer
        id: flowise-analysis
        env:
          FLOWISE_BEARER_TOKEN: ${{ secrets.FLOWISE_BEARER_TOKEN }}
        run: |
          # --- Tunables (adjust if needed) ---
          MAX_SUMMARY_CHARS=25000    # cap on rendered Markdown issues section
          MAX_QUESTION_CHARS=38000   # cap on final question string in payload
          # -----------------------------------

          ISSUES_JSON=$(cat issues.json)
          CHANGED_FILES=$(cat changed.json)

          echo "======= DEBUG: ISSUES JSON (count) ======="
          echo "$ISSUES_JSON" | jq 'length'

          echo "======= DEBUG: CHANGED FILES ======="
          echo "$CHANGED_FILES" | jq .

          if [[ "$ISSUES_JSON" == "[]" ]]; then
            echo '{"text": "âœ… No potential Technical Debt was detected in the current PR."}' > flowise_output.json
            exit 0
          fi

          # Render a compact Markdown summary, then cap it
          SONAR_ISSUE_SUMMARY=$(jq -r '
            .[] |
            "### Rule: \(.rule)\n" +
            "* Severity: \(.severity)\n" +
            "* Location: \(.component):\(.line)\n" +
            "* Message: \(.message)\n" +
            (if .snippet then "* Snippet:*\\n```\\n\(.snippet)\\n```" else "" end) + "\n"
          ' issues.json | sed ':a;N;$!ba;s/\n/\\n/g')

          # Trim the summary to MAX_SUMMARY_CHARS
          SONAR_ISSUE_SUMMARY=$(printf "%s" "$SONAR_ISSUE_SUMMARY" | head -c "$MAX_SUMMARY_CHARS")

          QUESTION_TEXT="You're analyzing SonarCloud issues from Pull Request #${{ github.event.pull_request.number }} in the '${{ github.repository }}' repository (owner: '${{ github.repository_owner }}'), targeting the '${{ github.event.pull_request.head.ref }}' branch. If there are duplicate issues, analyze them only once.\n\n## Sonar Issues (truncated if large)\n$SONAR_ISSUE_SUMMARY"

          # Final cap on the full question text to protect the model endpoint
          QUESTION_TEXT=$(printf "%s" "$QUESTION_TEXT" | head -c "$MAX_QUESTION_CHARS")

          PAYLOAD=$(jq -cn \
            --arg pr "${{ github.event.pull_request.number }}" \
            --arg proj "${{ env.PROJECT_KEY }}" \
            --arg question "$QUESTION_TEXT" \
            --argjson issues "$ISSUES_JSON" \
            --argjson changedFiles "$CHANGED_FILES" \
            '{
              question: $question,
              overrideConfig: {
                projectKey: $proj,
                prNumber: $pr,
                changedFiles: $changedFiles
              },
              issues: $issues
            }')

          echo "======= DEBUG: FINAL PAYLOAD (sizes) ======="
          echo "question bytes: $(printf '%s' "$QUESTION_TEXT" | wc -c)"
          echo "issues count:   $(echo "$ISSUES_JSON" | jq 'length')"
          echo "changed files:  $(echo "$CHANGED_FILES" | jq 'length')"

          ATTEMPTS=0
          MAX_ATTEMPTS=5
          SUCCESS=false

          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            echo "Attempt $((ATTEMPTS+1)) of $MAX_ATTEMPTS..."
            RESPONSE=$(curl -s -X POST \
              -H "Authorization: Bearer $FLOWISE_BEARER_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              https://cloud.flowiseai.com/api/v1/prediction/ae8b5cb1-b90b-4f25-9395-a839e92e2bf6)

            echo "$RESPONSE" > flowise_output.json

            if echo "$RESPONSE" | jq -e '.statusCode == 500 and (.message | contains("Agent node"))' > /dev/null; then
              echo "Transient Flowise error detected, retrying in 10s..."
              sleep 10
              ATTEMPTS=$((ATTEMPTS+1))
            else
              echo "Flowise responded successfully or with non-retryable error."
              SUCCESS=true
              break
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo "Flowise request failed after $MAX_ATTEMPTS attempts."
            exit 1
          fi


      - name: Comment on PR
        uses: actions/github-script@v6
        if: success()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = 'flowise_output.json';

            if (!fs.existsSync(path)) {
              core.warning('Flowise output file not found.');
              return;
            }

            const raw = fs.readFileSync(path, 'utf8').trim();
            if (!raw || raw[0] !== '{') {
              core.warning('Flowise did not return valid JSON. Skipping comment.');
              return;
            }

            let parsed;
            try {
              parsed = JSON.parse(raw);
            } catch (e) {
              core.warning(`JSON parse error: ${e.message}`);
              return;
            }

            const body = parsed.text || 'Flowise returned:\n```json\n' +
                          JSON.stringify(parsed, null, 2) + '\n```';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });
